/*
컴퓨터

*CPU : 컴퓨터의 뇌 역할 / 명령 장치 / 연산
*RAM(메모리) : 자료형 / 메모리 관리 - 배포 - 전원 끄면 날아가고 휘발성 - 속도가 빠르다.
*HDD/SSD(하드디스크) : 메모리 - 전원 꺼도 남아있다. - 속도가 상대적으로 느리다. - 물리적인 거리
- GPU(그래픽카드) : CPU 보조역할 - 연산 장치 - 병렬 연산장치 - AI
*/

#include <iostream> // 전처리기 / 포함하다. - 파일 코드를 복붙 시킨다. 

// 반환형 함수이름 인자() 구현부{}
//void : 없다/ 반환 할게 없을 때는 void로 하는게 좋다.
int main() // 메인 함수가 존재하는 cpp가 메인 cpp / 단, 1개만 존재한다.
{
	std::cout << "Hello World \n"; //c++ 글자 출력하기 위한 문법
	
	//"": 문자열 적을 때 사용
	//'': 문자 한개
	system("pause"); // 일시정지
	// ; : 문장이 끝나면 ;을 꼭 붙여줘야한다. - 함수 불필요
	return 0; // 반환형에 맞는 값으로 리턴을 시킨다. 
}

/*
디버그 : 디버깅하기 위한 빌드 방법 - 개발 단계에서 빌드하는 방법
         - 디버깅을 위해 만든거라서 속도가 느린 대신, 버그를 검출하기 위한 코드가 내부적으로 존재

버그 - 벌레
옛날 최초의 버그는 이 벌레 때문에
디버그 - 벌레 퇴치 
de + bug

릴리즈 : 배포용 - 최적화된 코드로 빌드가 되어서 속도가 매우 빠르다.

cpu : 인텔

인텔 : 64비트용 CPU
       - 32비트용 CPU - 제품 번호 : x86

x64 - 64비트 : 64비트가 매우 좋음
x86 - 32비트 : 안좋음

pointer : 주소 저장
x86(32비트) - 4byte
64비트 - 8byte


4gb
서든어택 / 롤 / 메이플스토리

64비트용 위쳐3
*/

/*
프로그래밍 - 프로그램 빌드

빌드 : 실행파일로 만드는 것
- Visual Studio : IDE - Integrated Development Environment (통합 개발 환경)
빌드 / 소스 코드 오류 검출 / 디버깅

빌드 과정
전처리 -> 컴파일과정 (컴파일 -> 어셈블) -> 링크

<컴파일 단계>
1. 전처리
앞에 # 붙어있는 문법이다.
빌드 과정 중 가장 먼저 실행된다.
#include : 파일을 불러오기
#define : 정의하기
- #define DISPLAY_WIDTH 1024
등등 여러가지 있음

2. 컴파일
소스코드 -> 어셈블러로 변환

3. 어셈블
어셈블러 -> 기계어로 변환

4. 링크
기계어로 변환된 코드를 exe 파일로 만들어주는 단계

100101010101010 -> 빨간 화며
010100101010  -> 파란 화면

소스코드 작성 -> 어셈블리어 -> 기계어
*.cpp                ->                  *.obj(목적 파일) 

Inventory.cpp       ->  Inventory.obj
Player.cpp          ->  Player.obj
Monster.cpp         ->  Monster.obj

링크
Inventory.obj + Player.obj + Monster.obj = exe

윈도우OS
소스코드 -> exe 파일로 바꾸는 과정

안드로이드OS
apk

MAC OS
ipa

IDE : Visual Studio 2022
*/

